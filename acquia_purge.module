<?php

/**
 * @file acquia_purge.module
 * Automatically purge pages upon save or the full site from Varnish.
 * @author
 * Niels van Mourik - Acquia Client Advisory <niels.vanmourik@acquia.com>
 */

/**
 * Implements hook_permission().
 */
function acquia_purge_permission() {
  return array(
    'purge notification' =>  array(
      'title' => t('Purge notification'),
      'description' => t('Get a confirmation message on screen for all items that have been purged.'),
    ),
  );
}

/**
 * Implements hook_expire_cache().
 */
function acquia_purge_expire_cache($paths) {

  // The expire module has a interestingly weird option named "Include base URL
  // in expires" which gives us filthy paths with base URL's in it. If its
  // enabled we do our best to strip and clean the paths.
  if (variable_get('expire_include_base_url', EXPIRE_INCLUDE_BASE_URL)) {
    $stripped_paths = array();
    $domains = _acquia_purge_get_domains();
    foreach ($paths as $path) {
      $stripped_path = $path;
      foreach ($domains as $domain) {
        $stripped_path = str_replace("http://$domain", '', $stripped_path);
        $stripped_path = str_replace("https://$domain", '', $stripped_path);
      }
      $stripped_paths[] = $stripped_path;
    }
    $paths = $stripped_paths;
  }

  acquia_purge_purge_paths($stripped_paths);
}

/**
 * Implements hook_node_insert().
 */
function acquia_purge_node_insert($node) {

  // Pre-purge new nodes to be on the safe side, take all domains.
  if (!module_exists('expire') && !module_exists('purge')) {
    acquia_purge_purge_node($node);
  }
}

/**
 * Implements hook_node_update().
 */
function acquia_purge_node_update($node) {

  // Purge updated nodes from all domains in Varnish.
  if (!module_exists('expire') && !module_exists('purge')) {
    acquia_purge_purge_node($node);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() - system_performance_settings form.
 */
function acquia_purge_form_system_performance_settings_alter(&$form, &$form_state, $form_id) {

  /**
   * Add a checkbox to the performance form to allow users to enable/disable purge reporting.
   */
  $checkbox = array();
  $checkbox['#title'] = t('Report cache purges');
  $checkbox['#description'] = t('Whenever something in Drupal gets updated that could be remotely cached in Varnish the Acquia Purge module can report this to the screen to notify you. Note that you will need to enable the <i>purge notification</i> permission first. When you install and enable the expire module much more urls will be pro actively purged from your Acquia site.');
  $checkbox['#default_value'] = variable_get('acquia_purge_reportpurges', TRUE);
  $checkbox['#type'] = 'checkbox';
  $checkbox['#weight'] = -4;
  $form['caching']['acquia_purge_reportpurges'] = $checkbox;
}

/**
 * Determine whether we are running on Acquia Cloud or not.
 *
 * @returns
 *   A boolean expression indicating if we currently run on Acquia cloud.
 */
function _acquia_purge_are_we_on_acquiacloud() {
  static $connected;

  // Disable purging from Drush and other command line invocations for now.
  if (php_sapi_name() == 'cli') {
    return FALSE;
  }

  // Build our assertions logic and cache it statically.
  if (is_null($connected)) {
    $assertions = array(
      is_array(variable_get('acquia_hosting_site_info', FALSE)),
      (bool)_acquia_purge_get_site_name(),
      (bool)_acquia_purge_get_site_group(),
      function_exists('curl_init')
    );
    $connected = !in_array(FALSE, $assertions);
  }
  return $connected;
}

/**
 * Get a list of defined domains that we can purge for.
 *
 * @returns
 *  Array with string values mapping to all defined DNS domains for this site.
 */
function _acquia_purge_get_domains() {
  static $domains;

  // Statically cache the domains as fetching them once per request is enough.
  if (is_null($domains)) {
    $domains = array();

    // If the configuration key 'acquia_purge_domains' is set we skip automatic
    // detection fully and add that list of domains to be purged.
    if ($acquia_purge_domains = variable_get('acquia_purge_domains', FALSE)) {
      if (is_array($acquia_purge_domains) && count($acquia_purge_domains)) {
        foreach ($acquia_purge_domains as $domain) {
          _acquia_purge_get_domains_add($domain, $domains);
        }

        // Set and return the set of hardcoded domains.
        return $domains;
      }
    }

    // Add the current HTTP_HOST that we're connected to.
    _acquia_purge_get_domains_add($_SERVER['HTTP_HOST'], $domains);

    // Strip an empty absolute URL (which respects $base_url) and make sure
    // that domain is also in the list of domains to be purged.
    $base_domain = url('', array('absolute' => TRUE));
    $base_domain = str_replace('http://', '', str_replace('https://', '', $base_domain));
    $base_domain = str_replace('/', '', $base_domain);
    _acquia_purge_get_domains_add($base_domain, $domains);

    // Gather potentially defined domains in sites/sites.php, for this site.
    _acquia_purge_get_domains_add_sitesphp($domains);

    // To better support multi-sites we only load in the configured Acquia Cloud
    // domain names when we are on the 'default' site as that would else flood
    // another site which we don't want to see happening, on <front> for example.
    if ( ($conf_path = conf_path()) == 'sites/default' ) {

      // Add the domain names the customer defined on Acquia Cloud. When this
      // process would fail we have at least the current and/or $base_url domain.
      if (_acquia_purge_are_we_on_acquiacloud()) {
        _acquia_purge_get_domains_add_acloud($domains);
      }
    }
  }

  return $domains;
}

/**
 * Add a domain to the list of domains after cleaning and checking for duplicates.
 *
 * @param $domain
 *  The domain string to be added to the list.
 * @param &$domains
 *  A reference to the array of currently gathered domain names.
 *
 * @returns
 *  Void, data will be added by reference.
 */
function _acquia_purge_get_domains_add($domain, &$domains) {
  $domain = trim(drupal_strtolower($domain));
  if (!empty($domain) && !in_array($domain, $domains)) {
    $domains[] = $domain;
  }
}

/**
 * Expand the list of domains being gathered by those defined in Acquia Cloud.
 *
 * @param &$domains
 *  A reference to the array of currently gathered domain names.
 * @returns
 *  Void, data will be added by reference.
 * @warning
 *  The current implementation of this function is subject to change. @TODO
 */
function _acquia_purge_get_domains_add_acloud(&$domains) {

  // Albeit quite a dirty way, get all domains defined for this site's vhost.
  if (file_exists('/etc/apache2/conf.d')) {
    $site_name = _acquia_purge_get_site_name();
    $server_name = shell_exec("grep -r 'ServerName' /etc/apache2/conf.d/$site_name*.conf");
    foreach (explode('ServerName', $server_name) as $testable) {
      foreach (explode(' ', trim($testable)) as $domain) {
        _acquia_purge_get_domains_add($domain, $domains);
      }
    }
    $server_alias = shell_exec("grep -r 'ServerAlias' /etc/apache2/conf.d/$site_name*.conf");
    foreach (explode('ServerAlias', $server_alias) as $testable) {
      foreach (explode(' ', trim($testable)) as $domain) {
        _acquia_purge_get_domains_add($domain, $domains);
      }
    }
  }
}

/**
 * Expand the list of domains being gathered by interpreting sites/sites.php.
 *
 * @param &$domains
 *  A reference to the array of currently gathered domain names.
 * @returns
 *  Void, data will be added by reference.
 * @warning
 *  The way the sites/sites.php array was designed was to make it a
 *  lookup map with the current active URI as lookup resource, it makes
 *  that relatively easy to do. However, we want to get all domains that
 *  point to the currently chosen site. As the array keys are in the
 *  format of '<port>.<domain>.<path>' this is relatively hackish.
 */
function _acquia_purge_get_domains_add_sitesphp(&$domains) {
  $sitedir = str_replace('sites/', '', conf_path());

  // Only interpret the $sites array if the file sites/sites.php exists.
  if (!file_exists('sites/sites.php')) {
    return;
  }

  // Define the full list of TLD's we have to check against to determine if a
  // embedded domain name in '<port>.<domain>.<path>' seems valid for us.
  // @see http://xaviesteve.com/2094/internet-top-level-domains-in-php-javascript-array/
  include(drupal_get_path('module', 'acquia_purge') . '/acquia_purge.tlds.inc');

  // Include the file which will (re)propagate the $sites array for us.
  $sites = array();
  include('sites/sites.php');

  // Protect ourselves against badly written code inside sites.php.
  if ((!isset($sites)) || empty($sites)) {
    return;
  }

  // Iterate and validate each record in the resulting $sites array.
  foreach ($sites as $site => $directory) {

    // Skip those that point to a different site directory then we are on.
    if ($directory != $sitedir) {
      continue;
    }

    // Split up $site that can be defined in the form of '<port>.<domain>.<path>'.
    $site = explode('.', $site);

    // Strip TCP port's in '<port>....'.
    if (is_numeric($site[0])) {
      unset($site[0]);
    }

    // We skip all $site records which don't end on a common known TLD, examples
    // would be '8080.localhost', 'www.drupal.org.my.dir' and every other site
    // that's defined with a path appended to it. It's an unfortunate limitation
    // but a very hard thing to support, so checking on TLD's is the only
    // sensible thing we can do to support as much scenario's as possible.
    if (!in_array(end($site), $tlds)) {
      continue;
    }

    // What's left should be a 99.99% correct domain name we want to see purged.
    _acquia_purge_get_domains_add(implode('.', $site), $domains);
  }
}

/**
 * Determine the Acquia site name.
 *
 * @returns
 *  Either a boolean FALSE or a string identifying what site we are on.
 */
function _acquia_purge_get_site_name() {
  static $ah_site_name;
  if (is_null($ah_site_name)) {
    $ah_site_name = FALSE;
    if (isset($_ENV['AH_SITE_NAME']) && !empty($_ENV['AH_SITE_NAME'])) {
      $ah_site_name = $_ENV['AH_SITE_NAME'];
    }
  }
  return $ah_site_name;
}

/**
 * Determine the Acquia site group.
 *
 * @returns
 *  Either a boolean FALSE or a string identifying what site group this is.
 */
function _acquia_purge_get_site_group() {
  static $ah_site_group;
  if (is_null($ah_site_group)) {
    $ah_site_group = FALSE;
    if (isset($_ENV['AH_SITE_GROUP']) && !empty($_ENV['AH_SITE_GROUP'])) {
      $ah_site_group = $_ENV['AH_SITE_GROUP'];
    }
  }
  return $ah_site_group;
}

/**
 * Purge the paths from a node from Varnish.
 *
 * @param &$node
 *  A Drupal node object that was just inserted or saved.
 * @param $domains
 *  Array containing all the domain names the record should be purged
 *  from. Optional, default list of domain names will be generated else.
 *
 * @returns
 *  Boolean TRUE indicating success, boolean FALSE indicating FAILURE.
 */
function acquia_purge_purge_node(&$node, $domains = NULL) {

  // Purge updated nodes from all domains in Varnish.
  $paths = array('node/' . $node->nid);
  if (isset($node->path['alias']) && !empty($node->path['alias'])) {
    $paths[] = $node->path['alias'];
  }
  if (isset($node->promote) && $node->promote) {
    $paths[] = '<front>';
    $paths[] = 'rss.xml';
  }
  acquia_purge_purge_paths($paths);
}

/**
 * Purge a certain Drupal path from Varnish.
 *
 * @param $path
 *  The Drupal path (e.g. '<front>', 'user/1' or an aliased path).
 * @param $domains
 *  Array containing all the domain names the record should be purged
 *  from. Optional, default list of domain names will be generated else.
 *
 * @returns
 *  Boolean TRUE indicating success, boolean FALSE indicating FAILURE.
 */
function acquia_purge_purge_path($path, $domains = NULL) {

  // Refuse execution whenever we are outside Acquia Cloud.
  if (!_acquia_purge_are_we_on_acquiacloud()) {

    // When our detection logic tells us we are not on Acquia Cloud we want to
    // log a failed purge attempt and include debugging information (#2000824).
    watchdog(
      'acquia_purge',
      "Failed attempt to purge '%path' because we don't seem to be on Acquia "
        . "Cloud, debugging information: site-info-is-array='%site_info', curl-"
        . "init-function-exists='%curl_init', env-vars=(%env-vars), sapi=%sapi",
      array(
        '%path' => $path,
        '%site_info' => strip_tags(var_export(is_array(variable_get('acquia_hosting_site_info', FALSE)), TRUE)),
        '%curl_init' => strip_tags(var_export(function_exists('curl_init'), TRUE)),
        '%env-vars' => strip_tags(var_export($_ENV, TRUE)),
        '%sapi' => php_sapi_name()),
      WATCHDOG_WARNING);

    return FALSE;
  }

  // Get a list of domains ourselves when these are not given.
  if (is_null($domains)) {
    $domains = _acquia_purge_get_domains();
  }

  // The special path '<front>' links to the default front page.
  if ($path == '<front>') {
    $path = '';
  }

  // Declare the base path and sitename in local scope to prevent duplicate calls.
  $base_path = base_path();
  $site_name = _acquia_purge_get_site_name();

  // Log the path about to be purged and its domains.
  watchdog('acquia_purge', 'Purged path "%path" on these domains: %domains.',
    array('%path' => $path, '%domains' => implode(', ', $domains)));

  // Collect each execution result to be able to determine the return value.
  $results = array();

  // Loop through each domain and generate a URL to send the PURGE header to.
  foreach ($domains as $domain) {
    $headers = array("Accept-Encoding: gzip", "X-Acquia-Purge:$site_name");
    $uri = sprintf('http://%s%s%s', $domain, $base_path, $path);

    // Configure the curl resource.
    $curl = curl_init();
    curl_setopt($curl, CURLOPT_URL, $uri);
    curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
    curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'PURGE');
    curl_setopt($curl, CURLOPT_FAILONERROR, TRUE);

    // Execute the PURGE header and add up to the results.
    $results[] = curl_exec($curl);

    // Close the curl session.
    curl_close($curl);

    // To be certain we also clear any records from the cache_page bin.
    cache_clear_all($uri, 'cache_page');

    // Notify the user if he requested this.
    if (variable_get('acquia_purge_reportpurges', TRUE) && user_access('purge notification')) {
      drupal_set_message(t("Purged from Varnish: <b>@uri</b>", array('@uri' => $uri)), 'info');
    }
  }

  return !in_array(FALSE, $results);
}

/**
 * Purge a several Drupal paths from Varnish.
 *
 * @param $paths
 *  Array with Drupal paths (e.g. '<front>', 'user/1' or an aliased path).
 * @param $domains
 *  Array containing all the domain names the record should be purged
 *  from. Optional, default list of domain names will be generated else.
 *
 * @returns
 *  Boolean TRUE indicating success, boolean FALSE indicating FAILURE.
 */
function acquia_purge_purge_paths($paths, $domains = NULL) {
  $results = array();
  foreach ($paths as $path) {
    $results[] = acquia_purge_purge_path($path, $domains);
  }
  return !in_array(FALSE, $results);
}
