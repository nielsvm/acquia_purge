Readme
================================================================================
The Acquia Purge module allows Drupal sites hosted on Acquia Cloud to
automatically purge (wipe) pages from their Varnish powered load balancers, as
soon as content actually changed. The higher Drupal's "expiration of cached
pages"-setting (TTL) is configured the more your site will be served directly
off your load balancers. This effectively increases the efficiency of your site
and lowers hardware costs, leaving more resources for back-end traffic. In most
scenarios the module offers a full turn-key experience without requiring any
technical configuration.

Features:
 * Built with editorial people and end-users in mind.
 * On-screen progressbar showing pages being cleared and made public.
 * Turn-key installation for simple content sites.
 * Wipes pages based on detected changes by the expire module.
 * Integration with Rules allowing to wipe pages like 'news' and 'contact'.
 * Transparently wipes pages from Drupal's page cache.
 * Detects your Acquia Cloud domain names allowing manual overriding.
 * Support for both Domain Access and multi-site setups.
 * Detailed watchdog logging on everything that happens.
 * Atomic operation based on AJAX and the Queue API.
 * Manual purge feature for emergency administration needs.
 * Drush: ap-diagnosis, ap-domains, ap-forget, ap-list, ap-process, ap-purge.

Why do I need this?
================================================================================
Throughout the years the Acquia Support department has seen thousands of Drupal
sites pass by on daily basis and one of the most typical things we have noticed
is that many sites run with a very low "expiration of cached pages"-setting
(e.g. 5 minutes). This means that every single page ever generated by Drupal
will be cached very shortly by your load balancer and regenerated for no reason
just a couple of minutes after that. This puts your web servers under the
constant task of generating pages regardless if they actually changed or not.

By applying proactive purging on your site, it will actively tell your load
balancers what pages to forget while keeping the others in cache for much
longer. This hugely decreases the stress on your web servers and leaves more
"PHP processes" available for actual back-end traffic. Basically every site will
benefit from implementing this, especially content-focused sites like news
sites, blogs and brand sites.

Configurability
================================================================================
By strict design and principle, this module doesn't have any UI exposed settings
or configuration forms. The reason behind this philosophy is that - as a pure -
utility module only site administrators should be able to change anything and if
they do, things should be traceable in settings.php. Although Acquia Purge
attempts to stay as turnkey and zeroconf as possible, the following options
exist as of this version and documented below:

╔══════════════════════════╦═════════╦═════════════════════════════════════════╗
║      $conf setting       ║ Default ║               Description               ║
╠══════════════════════════╬═════════╬═════════════════════════════════════════╣
║ acquia_purge_domains     ║ (auto)  ║ Allows you to control which domains will║
║                          ║         ║ get purged, see DOMAINS.txt             ║
║                          ║         ║                                         ║
║ acquia_purge_cron        ║ FALSE   ║ Once set to TRUE, this will switch the  ║
║                          ║         ║ queue processing entirely to cron and   ║
║                          ║         ║ disable the client-side progressbar. Do ║
║                          ║         ║ keep an eye on 'drush ap-list' once     ║
║                          ║         ║ enabled as the queue can grow too fast  ║
║                          ║         ║ requiring a cron interval increase.     ║
║                          ║         ║ $conf['acquia_purge_cron'] = TRUE;      ║
║                          ║         ║                                         ║
╚══════════════════════════╩═════════╩═════════════════════════════════════════╝
